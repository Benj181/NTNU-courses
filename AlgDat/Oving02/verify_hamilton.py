import numpy as np

def unique(A, n):
    return len(np.unique(A)) == n

def verify_ham_cycle(G, cert):
    if G == [[0]] and cert == [0, 0]:
        return True
    n = len(cert)
    valid_steps = []
    for i in range(1, n):
        valid_steps.append(G[cert[i-1]][cert[i]])
    return all(valid_steps) and unique(cert, n-1) and cert[0] == cert[-1]


# Hardkodede tester
tests = [
    (([[0, 1, 1], [1, 0, 1], [1, 1, 0]], [1, 0, 2, 1]), True),
    (([[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]], [2, 1, 0, 3, 2]), True),
    (([[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]], [0, 4, 3, 1, 2, 0]), True),
    (([[0, 0, 0], [0, 0, 0], [0, 0, 0]], [0, 1, 2, 0]), False),
    (([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [0, 1, 2, 3, 0]), False),
    (([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [0, 1, 2, 3, 4, 0]), False),
    (([[0, 1, 0], [1, 0, 0], [0, 0, 0]], [0, 1, 2, 0]), False),
    (([[0, 1, 1], [1, 0, 1], [1, 1, 0]], [0, 2, 2, 0]), False),
    (([[0, 1], [1, 0]], [0, 0, 0]), False),
    (([[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 0]], [1, 2, 0, 3, 1]), True),
    (([[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]], [3, 4, 0, 1, 2, 3]), True),
    (([[0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0]], [1, 0, 2, 3, 1]), True),
    (([[0, 0, 1, 1, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 0], [1, 1, 1, 0, 0]], [0, 3, 2, 1, 4, 0]), True),
    (([[0, 0, 1, 1, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]], [2, 3, 1, 4, 0, 2]), True),
    (([[0, 0, 1, 1], [0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0]], [1, 3, 0, 2, 1]), False),
    (([[0, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0]], [1, 2, 0, 3, 1]), False),
    (([[0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0]], [5, 2, 1, 0, 3, 4, 5]), False),
    (([[0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0]], [1, 3, 2, 0, 1]), False),
    (([[0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0]], [2, 1, 4, 0, 3, 5, 2]), False),
    (([[0]], [0, 0]), True),
    (([[1]], [0, 0]), True)
]


failed = False
for test, answer in tests:
    G, cert = test
    student = verify_ham_cycle(G, cert)
    if student != answer:
        if failed:
            print("-"*50)
        failed = True

        print(f"""
Koden feilet for f√∏lgende instans:
G: {G}
vert: {cert}

Ditt svar: {student}
Riktig svar: {answer}
""")

if not failed:
    print("Koden ga riktig svar for alle eksempeltestene")